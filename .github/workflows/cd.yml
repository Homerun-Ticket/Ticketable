# CD : main 브랜치로 PR이 merge 될 때 도커 이미지 빌드, ECR 푸시, EC2 배포 수행
name: CD

# main 브랜치로 PR이 닫힐 때 실행
#on:
#  pull_request:
#    branches: ["main"]
#    types: [closed]

# test/cicd 브랜치에 푸시할 때 실행
on:
  push:
    branches: ["test/cicd"]

# CD 작업 정의
jobs:
  deploy:
    # PR이 merge 된 경우에만 실행
#    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest    # Ubuntu 최신 버전에서 실행
    steps:
      # main 브랜치의 최신 상태로 체크아웃
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: test/cicd
#          ref: main

      # JDK 17 환경 설정 (Corretto 사용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Gradle 캐시 설정 (의존성 및 빌드 캐시 재사용)
      - name: Gradle dependencies caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle wrapper 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle로 빌드 수행 (테스트는 제외, CI 에서 이미 테스트 함)
      - name: Build with Gradle (Skip Tests)
        run: ./gradlew build -x test

        # 도커 캐시 설정
      - name: Docker layers caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'build.gradle') }}
          restore-keys: ${{ runner.os }}-buildx-

      # AWS ECR 로그인
      - name: Login to AWS ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 도커 빌드 캐시 설정 및 이미지 빌드/푸시
      - name: Build and Push Docker Image to ECR
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
          SHORT_SHA: ${{ github.sha::8 }}
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:$SHORT_SHA \
            -t $AWS_REGISTRY/repo-ticketable:latest \
            --push .

      # EC2에 SSH 로 접속해 배포 수행
      - name: SSH Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
          SHORT_SHA: ${{ github.sha::8 }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Starting deployment..."                                  # 배포 시작 로그
            docker pull $AWS_REGISTRY/repo-ticketable:$SHORT_SHA
            docker stop ticketable_web || true                             # 기존 컨테이너 중지 없으면 무시
            docker rm ticketable_web || true                               # 기존 컨테이너 삭제 없으면 무시
            # 새 컨테이너 실행
            docker run -d --name ticketable_web \
              -p 80:8080 \                                                 # 호스트 80 포트를 컨테이너 8080 포트에 매핑
              -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN }} \
              $AWS_REGISTRY/repo-tiketable:$SHORT_SHA                     # 도커 이미지 실행
            echo "Deployment successful!"                                 # 배포 완료 로그