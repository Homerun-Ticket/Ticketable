# CD : main 브랜치로 PR이 merge 될 때 도커 이미지 빌드, ECR 푸시, EC2 배포 수행
name: CD

# main 브랜치로 PR이 닫힐 때 실행
#on:
#  pull_request:
#    branches: ["main"]
#    types: [closed]

# test/cicd 브랜치에 푸시할 때 실행
on:
  push:
    branches: ["test/cicd"]

# CD 작업 정의
jobs:
  deploy:
    runs-on: ubuntu-latest    # Ubuntu 최신 버전에서 실행
    steps:
      # main 브랜치의 최신 상태로 체크아웃
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: test/cicd

      # JDK 17 환경 설정 (Corretto 사용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Gradle 캐시 설정 (의존성 및 빌드 캐시 재사용)
      - name: Gradle dependencies caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle wrapper 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle로 빌드 수행 (테스트는 제외, CI 에서 이미 테스트 함)
      - name: Build with Gradle (Skip Tests)
        run: ./gradlew build -x test

        # 도커 캐시 설정
      - name: Docker layers caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'build.gradle') }}
          restore-keys: ${{ runner.os }}-buildx-

      # AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # AWS ECR 로그인
      - name: Login to AWS ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2

      # 도커 빌드 캐시 설정 및 이미지 빌드/푸시
      - name: Build and Push Docker Image to ECR
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:test-$SHORT_SHA \
            --push .

      # EC2에 SSH 로 접속해 배포 수행
      - name: SSH Deploy to EC2 re
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Starting deployment..."                                  # 배포 시작 로그
            AWS_REGISTRY="${{ secrets.AWS_REGISTRY }}"
            AWS_REGION="${{ secrets.AWS_REGION }}"
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            DB_URL="${{ secrets.DB_URL }}"
            DB_USERNAME="${{ secrets.DB_USERNAME }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            JWT_ACCESS_TOKEN="${{ secrets.JWT_ACCESS_TOKEN }}"
            IMPORT_API_KEY="${{ secrets.IMPORT_API_KEY }}"
            IMPORT_API_SECRET="${{ secrets.IMPORT_API_SECRET }}"
            BUCKET_NAME="${{ secrets.BUCKET_NAME }}"
            REGION_VALUE="${{ secrets.REGION_VALUE }}"
            ACCESS_KEY="${{ secrets.ACCESS_KEY }}"
            SECRET_KEY="${{ secrets.SECRET_KEY }}"
            echo "AWS_REGISTRY: $AWS_REGISTRY"
            echo "AWS_REGION: $AWS_REGION"
            echo "SHORT_SHA: $SHORT_SHA"
            echo "DB_URL: $DB_URL"
            IMAGE_TAG="test-$SHORT_SHA"
            IMAGE_NAME="$AWS_REGISTRY/repo-ticketable:$IMAGE_TAG"
            echo "Pulling image: $IMAGE_NAME"
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$AWS_REGISTRY" || { echo "ECR login failed"; exit 1; }
            docker pull $IMAGE_NAME || { echo "Failed to pull image"; exit 1; }
            docker stop ticketable_web || true                             # 기존 컨테이너 중지 없으면 무시
            docker rm ticketable_web || true                               # 기존 컨테이너 삭제 없으면 무시
            # 새 컨테이너 실행
            docker run -d --name ticketable_web \
              -p 8080:8080 \
              --env spring.datasource.url="$DB_URL" \
              --env spring.datasource.username="$DB_USERNAME" \
              --env spring.datasource.password="$DB_PASSWORD" \
              --env jwt.secret.key="$JWT_SECRET_KEY" \
              --env jwt.access.token="$JWT_ACCESS_TOKEN" \
              --env import.api.key="$IMPORT_API_KEY" \
              --env import.api.secret="$IMPORT_API_SECRET" \
              --env spring.cloud.aws.s3.bucketName="$BUCKET_NAME" \
              --env spring.cloud.aws.region.static="${{ secrets.REGION_VALUE }}" \
              --env spring.cloud.aws.credentials.access-key="$ACCESS_KEY" \
              --env spring.cloud.aws.credentials.secret-key="$SECRET_KEY" \
              --env spring.data.redis.host="3.39.237.240" \
              --env spring.data.redis.port="6379" \
              --env spring.datasource.driver-class-name="com.mysql.cj.jdbc.Driver" \
              --env spring.jpa.hibernate.ddl-auto="update" \
              --env spring.jpa.properties.hibernate.show_sql="true" \
              --env spring.jpa.properties.hibernate.format_sql="true" \
              --env spring.jpa.properties.hibernate.use_sql_comments="true" \
              --env spring.jpa.properties.hibernate.dialect="org.hibernate.dialect.MySQLDialect" \
              --env management.endpoints.web.exposure.include="prometheus" \
              $IMAGE_NAME || { echo "Failed to run container"; exit 1; }
            echo "Deployment successful!"                                 # 배포 완료 로그
            docker logs ticketable_web                                    # 컨테이너 로그 출력